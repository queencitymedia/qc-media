{
  "name": "QC Runner",
  "nodes": [
    { "parameters": { "httpMethod": "POST", "path": "qc-run", "responseMode": "lastNode", "options": {} }, "id": "Webhook", "name": "Webhook", "type": "n8n-nodes-base.webhook", "typeVersion": 1, "position": [ -400, 0 ] },
    { "parameters": { "functionCode": "const root = process.env.USERPROFILE.replace(/\\\\/g,'/') + '/qc-media/apps/web';const body = $json;function isUnderRoot(p){const path=require('path');const abs=path.resolve(root,p);return abs.replace(/\\\\/g,'/').toLowerCase().startsWith(root.toLowerCase());}if(!body.mode) throw new Error('mode is required');if(body.mode==='write_files'){if(!Array.isArray(body.files)||!body.files.length) throw new Error('files[] required');for(const f of body.files){if(!f.path||typeof f.content!=='string') throw new Error('files[].path and .content required');if(!isUnderRoot(f.path)) throw new Error('Refusing write outside project root: '+f.path);}}else if(body.mode==='run_script'){if(typeof body.script!=='string'||!body.script.trim()) throw new Error('script required');}else if(body.mode==='probe'){if(!Array.isArray(body.urls)||!body.urls.length) throw new Error('urls[] required');}else{throw new Error('unknown mode');}return [{ json: { root, ...body } }];" }, "id": "Validate & Route", "name": "Validate & Route", "type": "n8n-nodes-base.function", "typeVersion": 1, "position": [ -120, 0 ] },
    { "parameters": { "conditions": { "string": [ { "value1": "={{$json.mode}}", "operation": "equal", "value2": "write_files" } ] } }, "id": "IF write_files", "name": "IF write_files", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [ 120, -180 ] },
    { "parameters": { "command": "powershell", "input": "sentLines", "shellCommand": "$ErrorActionPreference='Stop';$root='$env:USERPROFILE\\qc-media\\apps\\web';$enc=New-Object System.Text.UTF8Encoding($false);$data=$json;foreach($f in $data.files){$p=Join-Path $root $f.path;New-Item -ItemType Directory -Force -Path (Split-Path -Parent $p) | Out-Null;[IO.File]::WriteAllText($p,$f.content,$enc)};Write-Output (@{ok=$true;wrote=$data.files.Count}|ConvertTo-Json -Compress)" }, "id": "Write Files (PowerShell)", "name": "Write Files (PowerShell)", "type": "n8n-nodes-base.executeCommand", "typeVersion": 1, "position": [ 360, -180 ] },
    { "parameters": { "conditions": { "string": [ { "value1": "={{$json.mode}}", "operation": "equal", "value2": "run_script" } ] } }, "id": "IF run_script", "name": "IF run_script", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [ 120, 0 ] },
    { "parameters": { "command": "powershell", "input": "sentLines", "shellCommand": "$ErrorActionPreference='Stop';$root='$env:USERPROFILE\\qc-media\\apps\\web';$data=$json;$tmp=Join-Path $env:TEMP ('qc-run-'+[Guid]::NewGuid().ToString()+'.ps1');Set-Content -LiteralPath $tmp -Value $data.script -Encoding UTF8;Push-Location $root;try{$out=& powershell -ExecutionPolicy Bypass -File $tmp 2>&1 | Out-String;Write-Output (@{ok=$true;output=$out}|ConvertTo-Json -Compress)}finally{Pop-Location;Remove-Item $tmp -Force -ErrorAction SilentlyContinue}" }, "id": "Run Script (PowerShell)", "name": "Run Script (PowerShell)", "type": "n8n-nodes-base.executeCommand", "typeVersion": 1, "position": [ 360, 0 ] },
    { "parameters": { "conditions": { "string": [ { "value1": "={{$json.mode}}", "operation": "equal", "value2": "probe" } ] } }, "id": "IF probe", "name": "IF probe", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [ 120, 180 ] },
    { "parameters": { "command": "powershell", "input": "sentLines", "shellCommand": "$ErrorActionPreference='SilentlyContinue';$data=$json;$results=@();foreach($u in $data.urls){try{$r=Invoke-WebRequest -Uri $u -UseBasicParsing -TimeoutSec 8;$results+=@{url=$u;status=$r.StatusCode;ok=$true}}catch{$results+=@{url=$u;status=0;ok=$false;err='probe_failed'}}};Write-Output (@{ok=$true;results=$results}|ConvertTo-Json -Compress)" }, "id": "Probe URLs", "name": "Probe URLs", "type": "n8n-nodes-base.executeCommand", "typeVersion": 1, "position": [ 360, 180 ] }
  ],
  "connections": {
    "Webhook": { "main": [ [ { "node": "Validate & Route", "type": "main", "index": 0 } ] ] },
    "Validate & Route": { "main": [ [ { "node": "IF write_files", "type": "main", "index": 0 }, { "node": "IF run_script", "type": "main", "index": 0 }, { "node": "IF probe", "type": "main", "index": 0 } ] ] },
    "IF write_files": { "main": [ [ { "node": "Write Files (PowerShell)", "type": "main", "index": 0 } ], [ ] ] },
    "IF run_script": { "main": [ [ { "node": "Run Script (PowerShell)", "type": "main", "index": 0 } ], [ ] ] },
    "IF probe": { "main": [ [ { "node": "Probe URLs", "type": "main", "index": 0 } ], [ ] ] }
  },
  "active": true
}
